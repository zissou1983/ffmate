name: Cross-platform cgo Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Cache Go modules & build cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.24.3'

  #     - name: Test unit
  #       run: |
  #         make test

  #     - name: Test e2e
  #       run: |
  #         make e2e

  build-frontend:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install PNPM 10
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Build frontend
        run: |
          make build+frontend

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmate-frontend
          path: |
            ui-build/

  build:
    needs: build-frontend
    continue-on-error: false
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache Go modules & build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: ffmate-frontend
          path: ui-build

      - name: Read .version
        id: dockertag
        uses: juliangruber/read-file-action@v1
        with:
          path: .version

      - name: Install cross-compiler (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Setup Zig (Windows)
        if: matrix.os == 'windows-latest'
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.11.0

      - name: Cache Zig
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            C:\Users\runneradmin\AppData\Local\zig
          key: ${{ runner.os }}-zig-0.11.0-cache

      - name: Setup Zig compiler directory (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create necessary directories
          New-Item -ItemType Directory -Force -Path "$env:TEMP\zig-cache" | Out-Null

      - name: Build binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          CGO_ENABLED: "1"
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}
          GOARCH: ${{ matrix.arch }}
          CC: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
          LDFLAGS: ${{ matrix.os == 'macos-latest' && '-s -w' || '-s -w -linkmode external -extldflags "-static"' }}
        run: |
          echo "Building for $GOOS/$GOARCH with ldflags: $LDFLAGS"
          go build -ldflags "$LDFLAGS" -o ffmate .

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          CGO_ENABLED: "1"
          GOOS: "windows"
          GOARCH: "${{ matrix.arch }}"
          EXT: ".exe"
          ZIG_LOCAL_CACHE_DIR: "${{ github.workspace }}/.zig-cache"
          ZIG_GLOBAL_CACHE_DIR: "${{ github.workspace }}/.zig-cache"
        run: |
          $target = if ("${{ matrix.arch }}" -eq "arm64") { "aarch64-windows-gnu" } else { "x86_64-windows-gnu" }
          Write-Host "Building for $env:GOOS/$env:GOARCH with target $target"

          # Set environment variables for Zig
          $env:CC = "zig cc -target $target"
          $env:CXX = "zig c++ -target $target"

          # Configure Go to use Zig as the compiler
          go env -w CGO_ENABLED=1
          go env -w CC="$env:CC"
          go env -w CXX="$env:CXX"

          # Build with specific flags for Windows
          $ldflags = "-s -w"
          go build -ldflags "$ldflags" -o ffmate$env:EXT .

      - name: Package artifact (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Derive GOOS from matrix.os
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            GOOS=linux
          else
            GOOS=darwin
          fi
          GOARCH=${{ matrix.arch }}
          gzip -n -c ffmate > ffmate-${GOOS}-${GOARCH}.gz

      - name: Package artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $GOOS = "windows"
          $GOARCH = "${{ matrix.arch }}"
          $EXT = ".exe"
          $base = "ffmate"
          Write-Host "Zipping $base$EXT into $base.zip"
          Compress-Archive -Path "$base$EXT" -DestinationPath "$base-$GOOS-$GOARCH.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmate-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ffmate-${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'macos-latest' && 'darwin') }}-${{ matrix.arch }}.gz
            ffmate-windows-${{ matrix.arch }}.zip

  build-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Read .version
        id: dockertag
        uses: juliangruber/read-file-action@v1
        with:
          path: .version

      - name: Prepare update for build
        run: |
          rm -rf _bin
          mkdir -p _bin
          gunzip -c dist/ffmate-ubuntu-latest-amd64/ffmate-linux-amd64.gz > _bin/linux-amd64
          chmod u+x _bin/linux-amd64
          gunzip -c dist/ffmate-ubuntu-latest-arm64/ffmate-linux-arm64.gz > _bin/linux-arm64
          chmod u+x _bin/linux-arm64

      - name: Login docker to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker images
        run: |
          docker buildx build -f Dockerfile.amd64 -t ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-amd64 --platform linux/amd64 --load .
          docker buildx build -f Dockerfile.arm64 -t ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-arm64 --platform linux/arm64 --load .
          docker push ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-amd64
          docker push ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-arm64

      - name: Build docker manifests
        run: |
          docker manifest create ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }} --amend ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-amd64 ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-arm64
          docker manifest create ghcr.io/welovemedia/ffmate:latest --amend ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-amd64 ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}-arm64
          docker manifest push ghcr.io/welovemedia/ffmate:${{ steps.dockertag.outputs.content }}
          docker manifest push ghcr.io/welovemedia/ffmate:latest

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Read .version
        id: dockertag
        uses: juliangruber/read-file-action@v1
        with:
          path: .version

      - uses: geekyeggo/delete-artifact@v5
        with:
          name: ffmate-frontend

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Install go-selfupdate
        run: go install github.com/sanbornm/go-selfupdate/cmd/go-selfupdate@latest

      - name: Prepare update binaries
        run: |
          rm -rf _bin
          mkdir -p _bin
          gunzip -c dist/ffmate-macos-latest-arm64/ffmate-darwin-arm64.gz > _bin/darwin-arm64
          gunzip -c dist/ffmate-ubuntu-latest-amd64/ffmate-linux-amd64.gz > _bin/linux-amd64
          gunzip -c dist/ffmate-ubuntu-latest-arm64/ffmate-linux-arm64.gz > _bin/linux-arm64
          gunzip -c dist/ffmate-macos-latest-amd64/ffmate-darwin-amd64.gz > _bin/darwin-amd64
          unzip -p dist/ffmate-windows-latest-amd64/ffmate-windows-amd64.zip ffmate.exe > _bin/windows-amd64
          unzip -p dist/ffmate-windows-latest-arm64/ffmate-windows-arm64.zip ffmate.exe > _bin/windows-arm64

      - name: Execute go-selfupdate
        run: |
          rm -rf _update
          ${GOPATH:-$HOME/go}/bin/go-selfupdate -o=_update/ffmate _bin/ ${{ steps.dockertag.outputs.content }}

      - name: Upload update binaries to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY_SECRET }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          AWS_S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          DEST_DIR: "_update"
          SOURCE_DIR: "_update"

      - name: Generate CHANGELOG.md
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null \
                    || git rev-list --max-parents=0 HEAD)
          echo "## Changelog" > CHANGELOG.md
          git log $PREV_TAG..HEAD --pretty=format:"* %h %s" >> CHANGELOG.md
          cat CHANGELOG.md

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          draft: false
          tag_name: ${{ steps.dockertag.outputs.content }}
          make_latest: "true"
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
